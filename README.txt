Это простое API для управления блогом с системой комментариев и возможностью администрирования.

Для того что бы начать использовать его на своем сайте проделайте несколько шагов описанных ниже:

-----------------------------------------------------------------------Установка:-----------------------------------------------------------------------

1) Зайдите в файл config_db.php и отредактируйте его используя данные вашего сервера.

2) В файле create_db.txt лежат запросы на создание таблиц в базе данных, требующихся для корректной работы api, 
выполните эти запросы, зайдя во вкладку SQL в вашем phpmyadmin 

3) Если вы сделали все верно, запустив файл index.php в браузере, вы увидите страницу для тестирования API нажмите на кнопку auth и посмотрите консоль браузера,
если запрос прошел нормально (код ответа 200 Successful authorization), то вы все сделали верно и API почти готова к использованию, если это не так то вернитесь к пункту 1
и попробуйте проделать занова все указаные действия более внимательно

4) Если вы удачно протестировали API то теперь вам осталось самую малость 
удалите файл index.php а также директорию js Внимание!!! Если вам нужны образцы всех доступных запросов к API, то не удаляйте файл js/index.js, а сперва изучите его!

5) Переместите все файлы в корень вышего сайта

6) API готова к использованию!

----------------------------------------------------------------Редактирование и "апгрейд" API:----------------------------------------------------------------

И так если вы решили каким то образом улучшить API то надеюсь этот небольшой туториал поможет вам понять структуру работы API

Все запросы перенапровляются на api.php подробнее про Rewrite вы можете посмотреть в файле .htaccess

Файл api.php это посути маршрутизатор который в зависимости от того какой url запускает ту или иную функцию класса Api 
(все функции этого класса и сам класс находяться в файле config.php)

В дериктории post_images есть файл save_images.php его задача вполне проста и ясна из названия, он просто сохраняет изображения на сервер в папку post_images

-----------------------------------------------------------------------Описание функций:----------------------------------------------------------------------- 

API авторизации доступен POST-запросом на адрес {API}/auth, а также принимает следующие обязательные параметры:

● login логин администратора

● password пароль администратора

(Вы можете создать любого пользователя в базе данных и использовать его в качестве администратора 
в следующих версиях API будет добавлена возможность выдачи разных прав для разных пользователей)

При успешной авторизации возвращается ответ в следующем виде:

● status code: 200

● status text: Successful authorization

● body:

○ status true

○ token bearer-токен для использования API администратора

При безуспешной авторизации или ошибке возвращается ответ в следующем виде:

● status code: 401

● status text: Invalid authorization data

● body:

○ status false

○ message Invalid authorization data

API создания постов доступен только администратору POST-запросом на адрес {API}/posts, а также принимает следующие обязательные параметры:

● title название поста, не пустой, уникальный

● anons анонс поста, не пустой

● text текст поста, не пустой

● tags тэги поста через запятую, не обязательное поле

● image изображение поста, не пустой, разрешенные форматы: jpg, png. Максимальный размер: 2 мегабайта

При успешном создании возвращается ответ в следующем виде:

● status code: 201

● status text: Successful creation

● body:

○ status true

○ post_id уникальный идентификатор поста

После создания поста изображение должно загружаться на сервер в папку {API}/post_images.

При безуспешном добавлении поста возвращается ответ в следующем виде:

● status code: 400

● status text: Creating error

● body:

○ status false

○ status text (описание ошибки)

API редактирования постов доступен только администратору POST-запросом на адрес {API}/posts/<POST_ID>, а также принимает следующие параметры:

● title название поста, уникальный

● anons анонс поста

● text текст поста

● tags тэги поста через запятую

● image изображение поста, разрешенные форматы: jpg, png. Максимальный размер: 2 мегабайта

При успешном редактировании поста должен возвращается ответ в следующем виде:

● status code: 201

● status text: Successful creation

● body:

○ status true

○ post

■ title название поста

■ anons анонс поста

■ text текст поста

■ tags массив из тэгов поста ([“tag1”, “tag2”])

■ image ссылка на изображение поста

При безуспешном добавлении поста возвращается ответ в следующем виде:

● status code: 400

● status text: Editing error

● body:

○ status false

При попытке редактирования несуществующего возвращается ответ в следующем виде:

● status code: 404

● status text: Post not found

● body:

○ message Post not found

API удаления постадоступен только администратору DELETE-запросом на адрес {API}/posts/<POST_ID>.

При успешном удалении поста возвращается ответ в следующем виде:

● status code: 201

● status text: Successful delete

● body:

○ status true

При попытке удаления несуществующего поста возвращается ответ в следующем виде:

● status code: 404

● status text: Post not found

● body:

○ message Post not found

API просмотра записей блога доступен GET-запросом на адрес {API}/posts. Ответ содержит массив объектов постов, содержащие следующие параметры:

● title название поста

● anons анонс поста

● text текст поста

● tags массив из тэгов поста ([“tag1”, “tag2”])

● image ссылка на изображение поста

Ответ имеет status code “200” и status text “List posts”.

API просмотра одной записи блога доступен GET-запросом на адрес {API}/posts/<POST_ID>.

Ответ содержит следующие параметры:

● title название поста

● anons анонс поста

● text текст поста

● tags массив из тэгов поста ([“tag1”, “tag2”])

● image ссылка на изображение поста

● comments массив из объектов комментариев содержащие следующие параметры:

○ comment_id уникальный идентификатор комментария

○ author имя автора, если автором комментария является администратор, то парметр содержит текст “admin”

○ comment текст комментария

Ответ имеет status code “200” и status text “View post”.

При попытке просмотра несуществующего поста возвращается ответ в следующем виде:

● status code: 404

● status text: Post not found

● body:

○ message Post not found

API добавления комментария к посту доступен POST-запросом на адрес {API}/posts/<POST_ID>/comments и содержит следующие обязательные параметры:

● author имя комментатора, обязательное только для гостя

● comment обязательное, максимум 255 символов

При успешном добавлении комментария должен возвращаться ответ в следующем виде:

● status code: 201

● status text: Successful creation

● body:

○ status true

При безуспешном добавлении комментария должен возвращаться ответ в следующем виде:

● status code: 400

● status text: Creating error

● body:

○ status false

○ message ассоциативный массив из параметров, которые содержат ошибку. В значении должно быть описание ошибки

При попытке добавить комментарий к несуществующему посту должен возвращаться ответ в следующем виде:

● status code: 404

● status text: Post not found

● body:

○ message Post not found

API удаления комментария к посту доступен только администратору DELETE-запросом на адрес {API}/posts/<POST_ID>/comments/<COMMENT_ID>.

При успешном удалении комментария должен возвращаться ответ в следующем виде:

● status code: 201

● status text: Successful delete

● body:

○ status true

При попытке удаления комментария к несуществующему посту должен возвращаться ответ в следующем виде:

● status code: 404

● status text: Post not found

● body:

○ message Post not found

При попытке удаления несуществующего комментария должен возвращаться ответ в следующем виде:

● status code: 404

● status text: Comment not found

● body:

○ message Comment not found

API поиска постов по тегу доступен GET-запросом на адрес {API}/posts/tag/<TAG_NAME>.

В ответ должен возвращаться ответ в следующем виде:

● status code: 200

● status text: Found posts

● body массив из объектов постов, содержащие данный тэг:

○ title название поста

○ datatime дата и время создания поста в формате чч:мм дд.мм.гггг (12:35 06.08.2018)

○ anons анонс поста

○ text текст поста

○ tags массив из тэгов поста ([“tag1”, “tag2”])

○ image ссылка на изображение поста

Авторизация пользователя при использовании административных функциональных возможностей будет проверяться через authorization-token авторизацию.

поэтому к каждому запросу нужно добавлять заголовок Authorization: auth_token

где auth_token это token который вернула api после запроса на авторизацию 

!!!! В  js/index.js лежат образцы запросов к API !!!!

При безуспешной попытке пройти авторизацию по токену на любой из запросов, который должен быть доступен только администратору, должен возвращаться ответ в следующем виде:

● status code: 401

● status text: Unauthorized

● body:

○ message Unauthorized 

Удачного пользования вопрос по установке/работе/использовании api вы можете отправить на адрес a.hatson22@gmail.com или a.hatson@ya.ru 
!!!! При отправке email укажите тему "ВОПРОСЫ | API" !!!!
!!!! Если вы не укажете тему вероятность того что вам не ответят очень высока !!!!